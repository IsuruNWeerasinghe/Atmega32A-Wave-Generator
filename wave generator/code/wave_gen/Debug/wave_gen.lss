
wave_gen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005be  00800060  00000300  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080061e  0080061e  00000952  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f24  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000870  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b9  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  000028b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000417  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000681  00000000  00000000  00002e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	16 e0       	ldi	r17, 0x06	; 6
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 31       	cpi	r26, 0x1E	; 30
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	ae e1       	ldi	r26, 0x1E	; 30
  7a:	b6 e0       	ldi	r27, 0x06	; 6
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 32       	cpi	r26, 0x20	; 32
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  8a:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcdcommand>:
 */ 

#include "LCD16x2_4bit.h"
void lcdcommand(unsigned char cmnd)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd & 0xf0);		/* SEND COMMAND TO DATA PORT */
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT &= ~ (1<<LCD_RS);						/* RS = 0 FOR COMMAND */
  9e:	c0 98       	cbi	0x18, 0	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
  a0:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	32 e0       	ldi	r19, 0x02	; 2
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcdcommand+0x12>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcdcommand+0x18>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
  aa:	c1 98       	cbi	0x18, 1	; 24
  ac:	e7 ec       	ldi	r30, 0xC7	; 199
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcdcommand+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcdcommand+0x24>
  b6:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd << 4);		/* SEND COMMAND TO DATA PORT */
  b8:	28 b3       	in	r18, 0x18	; 24
  ba:	2f 70       	andi	r18, 0x0F	; 15
  bc:	f0 e1       	ldi	r31, 0x10	; 16
  be:	8f 9f       	mul	r24, r31
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	82 2b       	or	r24, r18
  c6:	88 bb       	out	0x18, r24	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
  c8:	c1 9a       	sbi	0x18, 1	; 24
  ca:	32 e0       	ldi	r19, 0x02	; 2
  cc:	3a 95       	dec	r19
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcdcommand+0x3a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcdcommand+0x40>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
  d2:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f e9       	ldi	r24, 0x9F	; 159
  d6:	9f e0       	ldi	r25, 0x0F	; 15
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcdcommand+0x46>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcdcommand+0x4c>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <lcddata>:
	_delay_ms(2);									/* WAIT FOR MAKE ENABLE WIDE */
}

void lcddata(unsigned char data)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		/* SEND DATA TO DATA PORT */
  e2:	98 b3       	in	r25, 0x18	; 24
  e4:	9f 70       	andi	r25, 0x0F	; 15
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_RS);						/* MAKE RS = 1 FOR DATA */
  ee:	c0 9a       	sbi	0x18, 0	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE */
  f0:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	32 e0       	ldi	r19, 0x02	; 2
  f4:	3a 95       	dec	r19
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcddata+0x12>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcddata+0x18>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
  fa:	c1 98       	cbi	0x18, 1	; 24
  fc:	e7 ec       	ldi	r30, 0xC7	; 199
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcddata+0x1e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcddata+0x24>
 106:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		/*  */
 108:	28 b3       	in	r18, 0x18	; 24
 10a:	2f 70       	andi	r18, 0x0F	; 15
 10c:	f0 e1       	ldi	r31, 0x10	; 16
 10e:	8f 9f       	mul	r24, r31
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	82 2b       	or	r24, r18
 116:	88 bb       	out	0x18, r24	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE*/
 118:	c1 9a       	sbi	0x18, 1	; 24
 11a:	32 e0       	ldi	r19, 0x02	; 2
 11c:	3a 95       	dec	r19
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcddata+0x3a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcddata+0x40>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE*/
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE*/
 122:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8f e9       	ldi	r24, 0x9F	; 159
 126:	9f e0       	ldi	r25, 0x0F	; 15
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcddata+0x46>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcddata+0x4c>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <lcdinit>:
	_delay_ms(2);									/* WAIT FOR MAKE ENABLE WIDE*/
}

void lcdinit()
{
	LCD_DDDR = 0xFF;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	87 bb       	out	0x17, r24	; 23
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	81 ee       	ldi	r24, 0xE1	; 225
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <lcdinit+0xa>
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcdinit+0x14>
 146:	00 00       	nop
	_delay_ms(200);									/* WAIT FOR SOME TIME */
	lcdcommand(0x33);
 148:	83 e3       	ldi	r24, 0x33	; 51
 14a:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
	lcdcommand(0x32);								/* SEND $32 FOR INIT OT 0X02 */
 14e:	82 e3       	ldi	r24, 0x32	; 50
 150:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
	lcdcommand(0x28);								/* INIT. LCD 2 LINE, 5 X 7 MATRIX */
 154:	88 e2       	ldi	r24, 0x28	; 40
 156:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
	lcdcommand(0x0C);								/* DISPLAY ON CURSOR ON */
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
	lcdcommand(0x01);								/* LCD CLEAR */
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
 166:	8f e9       	ldi	r24, 0x9F	; 159
 168:	9f e0       	ldi	r25, 0x0F	; 15
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcdinit+0x38>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcdinit+0x3e>
 170:	00 00       	nop
	_delay_ms(2);
	lcdcommand(0x82);								/* SHIFT CURSOR TO WRITE */
 172:	82 e8       	ldi	r24, 0x82	; 130
 174:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
 178:	08 95       	ret

0000017a <lcd_gotoxy>:
}

void lcd_gotoxy(unsigned char x, unsigned char y)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	00 d0       	rcall	.+0      	; 0x180 <lcd_gotoxy+0x6>
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstcharadd[]={0x80, 0xC0};
 184:	90 e8       	ldi	r25, 0x80	; 128
 186:	99 83       	std	Y+1, r25	; 0x01
 188:	90 ec       	ldi	r25, 0xC0	; 192
 18a:	9a 83       	std	Y+2, r25	; 0x02
	lcdcommand(firstcharadd[y] + x);
 18c:	fe 01       	movw	r30, r28
 18e:	e6 0f       	add	r30, r22
 190:	f1 1d       	adc	r31, r1
 192:	91 81       	ldd	r25, Z+1	; 0x01
 194:	89 0f       	add	r24, r25
 196:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
}
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <lcd_print>:

void lcd_print(char *str)
{
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while (str[i] |= 0)
 1ac:	80 81       	ld	r24, Z
 1ae:	88 23       	and	r24, r24
 1b0:	59 f0       	breq	.+22     	; 0x1c8 <lcd_print+0x24>
 1b2:	8f 01       	movw	r16, r30
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcddata(str[i]);
 1b6:	0e 94 71 00 	call	0xe2	; 0xe2 <lcddata>
		i++;
 1ba:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 1bc:	f8 01       	movw	r30, r16
 1be:	ec 0f       	add	r30, r28
 1c0:	f1 1d       	adc	r31, r1
 1c2:	80 81       	ld	r24, Z
 1c4:	81 11       	cpse	r24, r1
 1c6:	f7 cf       	rjmp	.-18     	; 0x1b6 <lcd_print+0x12>
	{
		lcddata(str[i]);
		i++;
	}
}
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <lcd_clear>:

void lcd_clear()
{
	lcdcommand(0x01);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
 1d6:	8f e9       	ldi	r24, 0x9F	; 159
 1d8:	9f e0       	ldi	r25, 0x0F	; 15
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_clear+0xa>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <lcd_clear+0x10>
 1e0:	00 00       	nop
 1e2:	08 95       	ret

000001e4 <sineWave>:
	lcd_print("Wave Length");
	lcd_gotoxy(0,1);
	lcd_print(itoa(val2,dispVal,10));
}

void sineWave(int tim){
 1e4:	e0 e3       	ldi	r30, 0x30	; 48
 1e6:	f3 e0       	ldi	r31, 0x03	; 3
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	36 e0       	ldi	r19, 0x06	; 6
	for (int i=0; i< 360; i++){
		PORTC = sin8bit[i];
 1ec:	80 81       	ld	r24, Z
 1ee:	32 96       	adiw	r30, 0x02	; 2
 1f0:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f2:	85 e3       	ldi	r24, 0x35	; 53
 1f4:	8a 95       	dec	r24
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <sineWave+0x10>
 1f8:	00 00       	nop
	lcd_gotoxy(0,1);
	lcd_print(itoa(val2,dispVal,10));
}

void sineWave(int tim){
	for (int i=0; i< 360; i++){
 1fa:	e2 17       	cp	r30, r18
 1fc:	f3 07       	cpc	r31, r19
 1fe:	b1 f7       	brne	.-20     	; 0x1ec <sineWave+0x8>
		PORTC = sin8bit[i];
		_delay_us(20);
	}
}
 200:	08 95       	ret

00000202 <triWave>:

void triWave(int tim){
 202:	e0 e6       	ldi	r30, 0x60	; 96
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	20 e3       	ldi	r18, 0x30	; 48
 208:	33 e0       	ldi	r19, 0x03	; 3
		for (int i=0; i< 360; i++){
		PORTC = tri8bit[i];
 20a:	80 81       	ld	r24, Z
 20c:	32 96       	adiw	r30, 0x02	; 2
 20e:	85 bb       	out	0x15, r24	; 21
 210:	85 e3       	ldi	r24, 0x35	; 53
 212:	8a 95       	dec	r24
 214:	f1 f7       	brne	.-4      	; 0x212 <triWave+0x10>
 216:	00 00       	nop
		_delay_us(20);
	}
}

void triWave(int tim){
		for (int i=0; i< 360; i++){
 218:	e2 17       	cp	r30, r18
 21a:	f3 07       	cpc	r31, r19
 21c:	b1 f7       	brne	.-20     	; 0x20a <triWave+0x8>
		PORTC = tri8bit[i];
		_delay_us(20);
	}
}
 21e:	08 95       	ret

00000220 <squareWave>:

void squareWave(int tim){
	PORTC = 0xff;
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	85 bb       	out	0x15, r24	; 21
 224:	85 e3       	ldi	r24, 0x35	; 53
 226:	8a 95       	dec	r24
 228:	f1 f7       	brne	.-4      	; 0x226 <squareWave+0x6>
 22a:	00 00       	nop
	_delay_us(20);
	PORTC = 0;
 22c:	15 ba       	out	0x15, r1	; 21
 22e:	85 e3       	ldi	r24, 0x35	; 53
 230:	8a 95       	dec	r24
 232:	f1 f7       	brne	.-4      	; 0x230 <squareWave+0x10>
 234:	00 00       	nop
 236:	08 95       	ret

00000238 <__vector_1>:
	_delay_us(20);
}

ISR(INT0_vect){
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
	if (!(PIND & (1<<PIND2))){ mode++;}
 246:	82 99       	sbic	0x10, 2	; 16
 248:	09 c0       	rjmp	.+18     	; 0x25c <__vector_1+0x24>
 24a:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <__data_end>
 24e:	90 91 1f 06 	lds	r25, 0x061F	; 0x80061f <__data_end+0x1>
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	90 93 1f 06 	sts	0x061F, r25	; 0x80061f <__data_end+0x1>
 258:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <__data_end>
	if(mode==3){ mode = 0;}
 25c:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <__data_end>
 260:	90 91 1f 06 	lds	r25, 0x061F	; 0x80061f <__data_end+0x1>
 264:	03 97       	sbiw	r24, 0x03	; 3
 266:	21 f4       	brne	.+8      	; 0x270 <__vector_1+0x38>
 268:	10 92 1f 06 	sts	0x061F, r1	; 0x80061f <__data_end+0x1>
 26c:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <__data_end>
}
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <initModeSw>:

void initModeSw(void){
	DDRD &= ~(1<<INT0); //Configure INT0(PD2) as input
 27e:	8e 98       	cbi	0x11, 6	; 17
	GICR = 1<<INT0; //Enable external interrupt 0 and interrupt 1
 280:	80 e4       	ldi	r24, 0x40	; 64
 282:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 0<<ISC01 | 1<<ISC00; //The rising edge of INT0 generates an interrupt request
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	85 bf       	out	0x35, r24	; 53
	sei(); //Enable global interrupts
 288:	78 94       	sei
 28a:	08 95       	ret

0000028c <initADC>:
}

void initADC(unsigned char adchan){
	DDRA = DDRA &~(1<<7);
 28c:	d7 98       	cbi	0x1a, 7	; 26
	ADMUX = 0;
 28e:	17 b8       	out	0x07, r1	; 7
	ADMUX = ADMUX|1<<REFS0;
 290:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX= ADMUX|adchan;
 292:	97 b1       	in	r25, 0x07	; 7
 294:	89 2b       	or	r24, r25
 296:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0;
 298:	16 b8       	out	0x06, r1	; 6
	ADCSRA =ADCSRA| 1<<ADEN|1<<ADPS2|1<<ADPS1;// to set the division factor as 64
 29a:	86 b1       	in	r24, 0x06	; 6
 29c:	86 68       	ori	r24, 0x86	; 134
 29e:	86 b9       	out	0x06, r24	; 6
 2a0:	08 95       	ret

000002a2 <main>:
unsigned int val,val2;
char dispVal[10];
volatile uint8_t count;

int main(void){
	DDRC = 0xff;
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	84 bb       	out	0x14, r24	; 20
	initModeSw();
 2a6:	0e 94 3f 01 	call	0x27e	; 0x27e <initModeSw>
	initADC(7);
 2aa:	87 e0       	ldi	r24, 0x07	; 7
 2ac:	0e 94 46 01 	call	0x28c	; 0x28c <initADC>
	lcdinit();
 2b0:	0e 94 99 00 	call	0x132	; 0x132 <lcdinit>
	lcd_clear();
 2b4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_clear>
	lcd_gotoxy(0,0);
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_gotoxy>
	lcd_print("Signal Generator");
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	96 e0       	ldi	r25, 0x06	; 6
 2c4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_print>
	lcd_clear();
 2c8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_clear>
	
	while (1) {
		
		if(mode==1){ triWave(200);}
 2cc:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <__data_end>
 2d0:	90 91 1f 06 	lds	r25, 0x061F	; 0x80061f <__data_end+0x1>
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	91 05       	cpc	r25, r1
 2d8:	29 f4       	brne	.+10     	; 0x2e4 <main+0x42>
 2da:	88 ec       	ldi	r24, 0xC8	; 200
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 01 01 	call	0x202	; 0x202 <triWave>
 2e2:	f4 cf       	rjmp	.-24     	; 0x2cc <main+0x2a>
		else if(mode==2){ squareWave(1000);}
 2e4:	02 97       	sbiw	r24, 0x02	; 2
 2e6:	29 f4       	brne	.+10     	; 0x2f2 <main+0x50>
 2e8:	88 ee       	ldi	r24, 0xE8	; 232
 2ea:	93 e0       	ldi	r25, 0x03	; 3
 2ec:	0e 94 10 01 	call	0x220	; 0x220 <squareWave>
 2f0:	ed cf       	rjmp	.-38     	; 0x2cc <main+0x2a>
		else{ sineWave(200);}
 2f2:	88 ec       	ldi	r24, 0xC8	; 200
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <sineWave>
 2fa:	e8 cf       	rjmp	.-48     	; 0x2cc <main+0x2a>

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
